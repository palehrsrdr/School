attribute vec4 position;
attribute vec4 texcoord;
attribute vec4 normal;

uniform mat4 viewMatrix;
uniform mat4 worldMatrix;
uniform mat4 viewProjMatrix;
uniform float t;
uniform vec3 d[3];
uniform mat4 trans;

varying vec4 v_texcoord;
varying vec4 v_worldPos;
varying vec4 v_normal;
varying vec4 v_tangent;
varying vec4 v_viewPos;
varying vec4 v_pe;


float steepness = 1.5;
float amplitude = 0.3;
float freq = 0.5;
float velocity = 0.2;

float height(float x, float z)
{
	float sum = 0.0;
	for (int i = 0; i < 3; i++)
	{
		float s = t * velocity * freq + dot(d[i], vec3(x,0,z));
		float v = 0.5 * (sin(s) + 1.0);
		v = pow(v, steepness);
		v = amplitude * v;
		sum += v;
	}
	return sum;
}

vec3 calc_normal(float x, float z)
{
	float partialx = 0.0, partialz = 0.0;
    vec3 N = vec3(0.0,0.0,0.0);
	for (int i = 0; i < 3; i++)
	{
		float K = t * velocity * freq + dot(d[i], vec3(x,0,z)) * freq;
		partialx += amplitude * pow(0.5, steepness) * steepness * pow(sin(K)+1.0, steepness-1.0) * cos(K)* d[i].x * freq;
		partialz += amplitude * pow(0.5, steepness) * steepness * pow(sin(K)+1.0, steepness-1.0) * cos(K)* d[i].z * freq;
		vec3 bitan = vec3(1.0, partialx, 0.0);
		vec3 tan = vec3(0.0, partialz, 1.0); 
		N += cross(tan, bitan);
	}
	N = normalize(N);
	return N;
}

void main()
{
	vec4 p = position * worldMatrix;
	v_viewPos = p * viewMatrix; 
	v_pe = v_viewPos;
    vec4 pw = position * trans * worldMatrix;
	pw.y = height(pw.x, pw.z);
    vec4 n;
	n.xyz = calc_normal(pw.x, pw.z);
	n.w = 0.0;
    v_normal = n * worldMatrix;
    v_worldPos = pw;
    v_texcoord=texcoord;
    gl_Position = pw *  viewProjMatrix;
}