precision highp float;

uniform sampler2D shadowtexture;
uniform sampler2D basetexture;
uniform sampler2D emittexture;
uniform sampler2D spectexture;
uniform sampler2D celSampler;
uniform sampler2D shipCelTex;

uniform vec4 diffusemtl;
uniform vec4 specmtl;   //alpha=shininess

uniform vec4 attenuation;

uniform vec4 eyePos;
uniform float fogNear;
uniform float fogDelta;
uniform vec4 fogColor;
uniform mat4 worldMatrix;
uniform bool shadow;

uniform mat4 lightViewMatrix;
uniform mat4 lightProjMatrix;
uniform mat4 mapMatrix;
uniform float lightHither;
uniform float lightYon;

varying vec4 v_texcoord;
varying vec4 v_worldPos;
varying vec4 v_normal;

#define MAX_LIGHTS 4

uniform vec4 lightPos[MAX_LIGHTS];
uniform vec4 lightColor[MAX_LIGHTS];

void main(){

    vec3 N = v_normal.xyz;
    N=normalize(N);
    
    vec3 V = eyePos.xyz - v_worldPos.xyz;
    float eyeDistance = length(V);
    V=1.0/eyeDistance*V;
    
    vec4 diffuse=vec4(0,0,0,0);

	vec2 celidx = vec2(0,0);
	float dotproduct = 0.0;
    
    for(int i=0;i<MAX_LIGHTS;++i){
        vec3 L = lightPos[i].xyz-v_worldPos.xyz;
        float lightDistance = length(L);
        L=1.0/lightDistance*L;
        
        float diffuse1 = clamp( dot(L,N) , 0.0, 1.0);
    
        float afactor = 1.0 / 
            (attenuation[0] + 
            lightDistance*(attenuation[1]+
                lightDistance*attenuation[2]));
    
        diffuse1 *= afactor;
		dotproduct += diffuse1 * lightColor[i].r;
    }
    
	dotproduct = clamp(dotproduct, 0.0, 1.0);
	celidx.x = dotproduct;
	
    float fogpct = ( eyeDistance - fogNear ) / (fogDelta);
    fogpct = clamp(fogpct,0.0,1.0);
    
    vec4 texc = texture2D(basetexture,v_texcoord.st);
	vec4 celtex = texture2D(celSampler, celidx);
	vec4 celtexc = texture2D(shipCelTex, v_texcoord.st);
	vec4 basecolor;

	basecolor.rgb = celtex.xxx * diffusemtl.rgb * celtexc.rgb;
	basecolor.a = 1.0;
    
    vec4 c = mix(basecolor,fogColor,fogpct);
    
    gl_FragColor = c;
	
	vec4 wPos = v_worldPos * lightViewMatrix;
	float z1 = wPos.z * (-1.0);
	wPos = (wPos * lightProjMatrix) * mapMatrix;
	wPos /= wPos.w;
	z1 = (z1 - lightHither)/(lightYon - lightHither);
	float z2 = texture2D(shadowtexture,wPos.xy).r;
	
	if(!shadow){
		gl_FragColor = c;
	}
	else if(any(bvec4(greaterThan(wPos.xy,vec2(1.0,1.0)), lessThan(wPos.xy, vec2(0.0,0.0))))){
		gl_FragColor = vec4(0.0,0.0,0.0,1.0);
	}
	else if(z1 < 0.0 || z1 > (z2+0.005))
	{
		gl_FragColor = vec4(0.0,0.0,0.0,1.0);
	}
	else
	{
			gl_FragColor = c;
	} 
    
}
