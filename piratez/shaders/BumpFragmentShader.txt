precision highp float;

uniform sampler2D basetexture;
uniform sampler2D emittexture;
uniform sampler2D spectexture;
uniform sampler2D bumptexture;

uniform vec4 diffusemtl;
uniform vec4 specmtl;   //alpha=shininess

uniform vec4 attenuation;

uniform vec4 eyePos;
uniform float fogNear;
uniform float fogDelta;
uniform vec4 fogColor;
uniform mat4 worldMatrix;

varying vec4 v_texcoord;
varying vec4 v_worldPos;
varying vec4 v_normal;
varying vec4 v_tangent;

#define MAX_LIGHTS 4

uniform vec4 lightPos[MAX_LIGHTS];
uniform vec4 lightColor[MAX_LIGHTS];

void main(){

	vec4 tang = v_tangent;
	vec4 No = v_normal;
    vec3 N = v_normal.xyz;
    N=normalize(N);
    No = normalize(No);
    
    vec3 V = eyePos.xyz - v_worldPos.xyz;
    float eyeDistance = length(V);
    V=1.0/eyeDistance*V;
    
    vec4 diffuse=vec4(0,0,0,0);
    vec4 specular=vec4(0,0,0,0); 
    
    vec4 q = texture2D(bumptexture,v_texcoord.st);
    for(int k=0;k<4;k++)
		{
			q[k] = (q[k] * 2.0) - 1.0;
		}
	vec4 T = tang - dot(tang,No) * No;
	T = normalize(T);
	vec3 B = cross(T.xyz, tang.xyz);
	B = normalize(B);
	mat4 vMat = mat4 (T.x, B.x, Na.x, 0,
					  T.y, B.y, N.y, 0,
					  T.z, B.z, N.z, 0,
					  0, 0, 0, 1);
    No = q*vMat;
    No = No * worldMatrix;
    
    
    for(int i=0;i<MAX_LIGHTS;++i){
        vec3 L = lightPos[i].xyz-v_worldPos.xyz;
        float lightDistance = length(L);
        L=1.0/lightDistance*L;
        
        float diffuse1 = clamp( dot(L,No.xyz) , 0.0, 1.0);
        //float diffuse1 = clamp( dot(L,N.xyz) , 0.0, 1.0);
    
        vec3 R = reflect(-L.xyz,No.xyz);
        //vec3 R = reflect(-L.xyz,N.xyz);
        float specular1 = dot(V,R);
        specular1 = clamp(specular1,0.0,1.0);
        specular1 = pow(specular1,specmtl.a);
        specular1 = specular1 * sign(diffuse1);    //no spec if light can't see surface
    
        float afactor = 1.0 / 
            (attenuation[0] + 
            lightDistance*(attenuation[1]+
                lightDistance*attenuation[2]));
    
        diffuse1 *= afactor;
        specular1 *= afactor;
        
        diffuse += diffuse1 * lightColor[i];
        specular += specular1 * texture2D(spectexture,v_texcoord.st) * lightColor[i];
    }
    
    
    float fogpct = eyeDistance - fogNear;
    fogpct = fogpct / fogDelta;
    fogpct = clamp(fogpct,0.0,1.0);    
    
    vec4 texc = texture2D(basetexture,v_texcoord.st);
    vec4 basecolor;

    basecolor.rgb = diffusemtl.rgb * diffuse.rgb * texc.rgb;
    basecolor.rgb += specular.rgb*specmtl.rgb;
    basecolor.a = diffusemtl.a * texc.a;
    
    basecolor.rgb += texture2D(emittexture,v_texcoord.st).rgb;
    
    vec4 c = mix(basecolor,fogColor,fogpct);
    
    gl_FragColor = c;
    
}
